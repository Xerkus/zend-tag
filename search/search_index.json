{
    "docs": [
        {
            "location": "/",
            "text": "zend-tag\n\n\n\n\n\n\nZend\\Tag\n is a component suite which provides a facility to work with taggable\nItems. As its base, it provides two classes to work with Tags, \nZend\\Tag\\Item\n\nand \nZend\\Tag\\ItemList\n. Additionally, it comes with the interface\n\nZend\\Tag\\TaggableInterface\n, which allows you to use any of your models as a\ntaggable item in conjunction with \nZend\\Tag\n.\n\n\n\n\nFile issues at https://github.com/zendframework/zend-tag/issues\n\n\nDocumentation is at https://docs.zendframework.com/zend-tag/",
            "title": "zend-tag"
        },
        {
            "location": "/#zend-tag",
            "text": "Zend\\Tag  is a component suite which provides a facility to work with taggable\nItems. As its base, it provides two classes to work with Tags,  Zend\\Tag\\Item \nand  Zend\\Tag\\ItemList . Additionally, it comes with the interface Zend\\Tag\\TaggableInterface , which allows you to use any of your models as a\ntaggable item in conjunction with  Zend\\Tag .   File issues at https://github.com/zendframework/zend-tag/issues  Documentation is at https://docs.zendframework.com/zend-tag/",
            "title": "zend-tag"
        },
        {
            "location": "/quick-start/",
            "text": "Introduction and Quick Start\n\n\nzend-tag provides the ability to work with taggable items. At its foundation, it\nprovides two classes to work with tags, \nZend\\Tag\\Item\n and \nZend\\Tag\\ItemList\n.\nAdditionally, it comes with the interface \nZend\\Tag\\TaggableInterface\n, which\nallows you to use any of your models as a taggable item in conjunction with the\ncomponent.\n\n\nZend\\Tag\\Item\n provides the essential functionality required to work with all\nother functionality within the component. A taggable item always consists of a\ntitle and a relative weight (e.g. number of occurrences). It also stores\nparameters which are used by the different sub-components.\n\n\nZend\\Tag\\ItemList\n exists to group multiple items together as an array\niterator, and provides additional functionality to calculate absolute weight\nvalues based on the given relative weights of each item in it.\n\n\nQuick Start\n\n\nThis example illustrates how to create a list of tags and spread absolute weight\nvalues over them.\n\n\n// Create the item list\n$list = new Zend\\Tag\\ItemList();\n\n// Assign tags to it\n$list[] = new Zend\\Tag\\Item(['title' => 'Code', 'weight' => 50]);\n$list[] = new Zend\\Tag\\Item(['title' => 'Zend Framework', 'weight' => 1]);\n$list[] = new Zend\\Tag\\Item(['title' => 'PHP', 'weight' => 5]);\n\n// Spread absolute values on the items\n$list->spreadWeightValues([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n// Output the items with their absolute values\nforeach ($list as $item) {\n    printf(\"%s: %d\\n\", $item->getTitle(), $item->getParam('weightValue'));\n}\n\n\n\nThis will output the three items \"Code\", \"Zend Framework\", and \"PHP\", with the\nabsolute values 10, 1 and 2:\n\n\nCode: 10\nZend Framework: 1\nPHP: 2",
            "title": "Quick Start"
        },
        {
            "location": "/quick-start/#introduction-and-quick-start",
            "text": "zend-tag provides the ability to work with taggable items. At its foundation, it\nprovides two classes to work with tags,  Zend\\Tag\\Item  and  Zend\\Tag\\ItemList .\nAdditionally, it comes with the interface  Zend\\Tag\\TaggableInterface , which\nallows you to use any of your models as a taggable item in conjunction with the\ncomponent.  Zend\\Tag\\Item  provides the essential functionality required to work with all\nother functionality within the component. A taggable item always consists of a\ntitle and a relative weight (e.g. number of occurrences). It also stores\nparameters which are used by the different sub-components.  Zend\\Tag\\ItemList  exists to group multiple items together as an array\niterator, and provides additional functionality to calculate absolute weight\nvalues based on the given relative weights of each item in it.",
            "title": "Introduction and Quick Start"
        },
        {
            "location": "/quick-start/#quick-start",
            "text": "This example illustrates how to create a list of tags and spread absolute weight\nvalues over them.  // Create the item list\n$list = new Zend\\Tag\\ItemList();\n\n// Assign tags to it\n$list[] = new Zend\\Tag\\Item(['title' => 'Code', 'weight' => 50]);\n$list[] = new Zend\\Tag\\Item(['title' => 'Zend Framework', 'weight' => 1]);\n$list[] = new Zend\\Tag\\Item(['title' => 'PHP', 'weight' => 5]);\n\n// Spread absolute values on the items\n$list->spreadWeightValues([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n// Output the items with their absolute values\nforeach ($list as $item) {\n    printf(\"%s: %d\\n\", $item->getTitle(), $item->getParam('weightValue'));\n}  This will output the three items \"Code\", \"Zend Framework\", and \"PHP\", with the\nabsolute values 10, 1 and 2:  Code: 10\nZend Framework: 1\nPHP: 2",
            "title": "Quick Start"
        },
        {
            "location": "/tag-cloud/",
            "text": "Creating tag clouds\n\n\nZend\\Tag\\Cloud\n is the rendering aspect of zend-tag. By default, it comes with\na set of HTML decorators, allowing you to create tag clouds for a website. It\nalso supplies you with two abstract classes to create your own decorators; one\nuse case might be to create tag clouds in PDF documents.\n\n\nYou can instantiate and configure \nZend\\Tag\\Cloud\n either programmatically or\nvia a configuration sturcture (either an array or an instance of \nTraversable\n).\n\n\nThe following options are available:\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncloudDecorator\n\n\nDefines the decorator for the cloud. Can either be the name of the class which should be loaded by the plugin manager, an instance of \nZend\\Tag\\Cloud\\Decorator\\AbstractCloud\n or an array containing the decorator under the key decorator and optionally an array under the key options, which will be passed to the decorator\u2019s constructor.\n\n\n\n\n\n\ntagDecorator\n\n\nDefines the decorator for individual tags. This can either be the name of the class which should be loaded by the plugin manager, an instance of \nZend\\Tag\\Cloud\\Decorator\\AbstractTag\n or an array containing the decorator under the key decorator and optionally an array under the key options, which will be passed to the decorator\u2019s constructor.\n\n\n\n\n\n\ndecoratorPluginManager\n\n\nA different plugin manager to use. Must be an instance of \nZend\\ServiceManager\\AbstractPluginManager\n.\n\n\n\n\n\n\nitemList\n\n\nA different item list to use. Must be an instance of \nZend\\Tag\\ItemList\n.\n\n\n\n\n\n\ntags\n\n\nArray of tags to assign to the cloud. Each tag must either implement \nZend\\Tag\\TaggableInterface\n or be an array which can be used to instantiate \nZend\\Tag\\Item\n.\n\n\n\n\n\n\n\n\nUsing Zend\\Tag\\Cloud\n\n\nThis example illustrates a basic example of how to create a tag cloud, add\nmultiple tags to it, and finally render it.\n\n\n// Create the cloud and assign static tags to it\n$cloud = new Zend\\Tag\\Cloud([\n    'tags' => [\n        [\n            'title'  => 'Code',\n            'weight' => 50,\n            'params' => ['url' => '/tag/code'],\n        ],\n        [\n            'title'  => 'Zend Framework',\n            'weight' => 1,\n            'params' => ['url' => '/tag/zend-framework'],\n        ],\n        [\n            'title' => 'PHP',\n            'weight' => 5,\n            'params' => ['url' => '/tag/php'],\n        ],\n    ],\n]);\n\n// Render the cloud\necho $cloud;\n\n\n\nThis will output the tag cloud with the three tags, spread with the default\nfont-sizes:\n\n\n<ul class=\"zend-tag-cloud\">\n    <li>\n        <a href=\"/tag/code\" style=\"font-size: 20px;\">\n            Code\n        </a>\n    </li>\n    <li>\n        <a href=\"/tag/zend-framework\" style=\"font-size: 10px;\">\n            Zend Framework\n        </a>\n    </li>\n    <li>\n        <a href=\"/tag/php\" style=\"font-size: 11px;\">\n            PHP\n        </a>\n    </li>\n</ul>\n\n\n\n\n\nFormatting\n\n\nThe HTML code examples are preformatted for a better visualization in the\ndocumentation.  You can define a output separator for the \nHTML cloud\ndecorator\n.\n\n\n\n\nThe following example shows how create the \nsame\n tag cloud from a \nZend\\Config\\Config\n object.\n\n\n; An example tags.ini file\ntags.1.title = \"Code\"\ntags.1.weight = 50\ntags.1.params.url = \"/tag/code\"\ntags.2.title = \"Zend Framework\"\ntags.2.weight = 1\ntags.2.params.url = \"/tag/zend-framework\"\ntags.3.title = \"PHP\"\ntags.3.weight = 2\ntags.3.params.url = \"/tag/php\"\n\n\n\n// Create the cloud from a Zend\\Config\\Config object\n$config = Zend\\Config\\Factory::fromFile('tags.ini');\n$cloud = new Zend\\Tag\\Cloud($config);\n\n// Render the cloud\necho $cloud;\n\n\n\nDecorators\n\n\nZend\\Tag\\Cloud\n requires two types of decorators to be able to render a tag cloud:\n\n\n\n\nA decorator for rendering an individual tag.\n\n\nA decorator for rendering the surrounding cloud.\n\n\n\n\nZend\\Tag\\Cloud\n ships a default decorator set for formatting a tag cloud in\nHTML. This set will, by default, create a tag cloud as a \n<ul>/<li>\n list,\nspread with different font-sizes according to the weight values of the tags\nassigned to them.\n\n\nHTML Tag decorator\n\n\nThe HTML tag decorator will by default render every tag in an anchor element, surrounded by a\n\n<li>\n element. The anchor itself is fixed and cannot be changed, but the surrounding element(s)\ncan.\n\n\n\n\nURL parameter\n\n\nAs the HTML tag decorator always surounds the tag title with an anchor, you\nshould define a URL parameter for every tag used in it.\n\n\n\n\nThe tag decorator can either spread different font-sizes over the anchors or a\ndefined list of classnames. When setting options for one of those possibilities,\nthe corresponding one will automatically be enabled.\n\n\nThe following configuration options are available:\n\n\n\n\n\n\n\n\nOption\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfontSizeUnit\n\n\npx\n\n\nDefines the font-size unit used for all font-sizes. The possible values are: em, ex, px, in, cm, mm, pt, pc and %.\n\n\n\n\n\n\nminFontSize\n\n\n10\n\n\nThe minimum font-size distributed through the tags (must be numeric).\n\n\n\n\n\n\nmaxFontSize\n\n\n20\n\n\nThe maximum font-size distributed through the tags (must be numeric).\n\n\n\n\n\n\nclassList\n\n\nnull\n\n\nAn array of classes distributed through the tags.\n\n\n\n\n\n\nhtmlTags\n\n\narray('li')\n\n\nAn array of HTML tags surrounding the anchor. Each element can either be a string, which is used as element type, or an array containing an attribute list for the element, defined as key/value pair. In this case, the array key is used as element type.\n\n\n\n\n\n\n\n\nThe following example shows how to create a tag cloud with a customized HTML tag decorator.\n\n\n$cloud = new Zend\\Tag\\Cloud([\n    'tagDecorator' => [\n        'decorator' => 'htmltag',\n        'options'   => [\n            'minFontSize' => '20',\n            'maxFontSize' => '50',\n            'htmlTags'    => [\n                'li' => ['class' => 'my_custom_class'],\n            ],\n        ],\n    ],\n    'tags' => [\n       [\n           'title'  => 'Code',\n           'weight' => 50,\n           'params' => ['url' => '/tag/code'],\n       ],\n       [\n           'title'  => 'Zend Framework',\n           'weight' => 1,\n           'params' => ['url' => '/tag/zend-framework'],\n       ],\n       [\n           'title'  => 'PHP',\n           'weight' => 5,\n           'params' => ['url' => '/tag/php']\n       ],\n   ],\n]);\n\n// Render the cloud\necho $cloud;\n\n\n\nThe output:\n\n\n<ul class=\"zend-tag-cloud\">\n    <li class=\"my_custom_class\">\n        <a href=\"/tag/code\" style=\"font-size: 50px;\">Code</a>\n    </li>\n    <li class=\"my_custom_class\">\n        <a href=\"/tag/zend-framework\" style=\"font-size: 20px;\">Zend Framework</a>\n    </li>\n    <li class=\"my_custom_class\">\n        <a href=\"/tag/php\" style=\"font-size: 23px;\">PHP</a>\n    </li>\n</ul>\n\n\n\nHTML Cloud decorator\n\n\nBy default, the HTML cloud decorator will surround the HTML tags with a \n<ul>\n\nelement and add no separation. Like the tag decorator, you can define multiple\nsurrounding HTML tags and additionally define a separator. The available options\nare:\n\n\n\n\n\n\n\n\nOption\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nseparator\n\n\n' '\n (a whitespace)\n\n\nDefines the separator which is placed between all tags.\n\n\n\n\n\n\nhtmlTags\n\n\narray('ul' => array('class' => 'zend-tag-cloud'))\n\n\nAn array of HTML tags surrounding all tags. Each element can either be a string, which is used as element type, or an array containing an attribute list for the element, defined as key/value pair. In this case, the array key is used as element type.\n\n\n\n\n\n\n\n\n// Create the cloud and assign static tags to it\n$cloud = new Zend\\Tag\\Cloud([\n    'cloudDecorator' => [\n        'decorator' => 'htmlcloud',\n        'options'   => [\n            'separator' => \"\\n\\n\",\n            'htmlTags'  => [\n                'ul' => [\n                    'class' => 'my_custom_class',\n                    'id'    => 'tag-cloud',\n                ],\n            ],\n        ],\n    ],\n    'tags' => [\n        array(\n            'title'  => 'Code',\n            'weight' => 50,\n            'params' => ['url' => '/tag/code'],\n        ],\n        [\n            'title'  => 'Zend Framework',\n            'weight' => 1,\n            'params' => ['url' => '/tag/zend-framework'],\n        ],\n        [\n            'title' => 'PHP',\n            'weight' => 5,\n            'params' => ['url' => '/tag/php'],\n        ],\n    ],\n]);\n\n// Render the cloud\necho $cloud;\n\n\n\nThe output:\n\n\n<ul class=\"my_custom_class\" id=\"tag-cloud\"><li><a href=\"/tag/code\" style=\"font-size:\n20px;\">Code</a></li>\n\n<li><a href=\"/tag/zend-framework\" style=\"font-size: 10px;\">Zend Framework</a></li>\n\n<li><a href=\"/tag/php\" style=\"font-size: 11px;\">PHP</a></li></ul>",
            "title": "Tag Clouds"
        },
        {
            "location": "/tag-cloud/#creating-tag-clouds",
            "text": "Zend\\Tag\\Cloud  is the rendering aspect of zend-tag. By default, it comes with\na set of HTML decorators, allowing you to create tag clouds for a website. It\nalso supplies you with two abstract classes to create your own decorators; one\nuse case might be to create tag clouds in PDF documents.  You can instantiate and configure  Zend\\Tag\\Cloud  either programmatically or\nvia a configuration sturcture (either an array or an instance of  Traversable ).  The following options are available:     Option  Description      cloudDecorator  Defines the decorator for the cloud. Can either be the name of the class which should be loaded by the plugin manager, an instance of  Zend\\Tag\\Cloud\\Decorator\\AbstractCloud  or an array containing the decorator under the key decorator and optionally an array under the key options, which will be passed to the decorator\u2019s constructor.    tagDecorator  Defines the decorator for individual tags. This can either be the name of the class which should be loaded by the plugin manager, an instance of  Zend\\Tag\\Cloud\\Decorator\\AbstractTag  or an array containing the decorator under the key decorator and optionally an array under the key options, which will be passed to the decorator\u2019s constructor.    decoratorPluginManager  A different plugin manager to use. Must be an instance of  Zend\\ServiceManager\\AbstractPluginManager .    itemList  A different item list to use. Must be an instance of  Zend\\Tag\\ItemList .    tags  Array of tags to assign to the cloud. Each tag must either implement  Zend\\Tag\\TaggableInterface  or be an array which can be used to instantiate  Zend\\Tag\\Item .",
            "title": "Creating tag clouds"
        },
        {
            "location": "/tag-cloud/#using-zend92tag92cloud",
            "text": "This example illustrates a basic example of how to create a tag cloud, add\nmultiple tags to it, and finally render it.  // Create the cloud and assign static tags to it\n$cloud = new Zend\\Tag\\Cloud([\n    'tags' => [\n        [\n            'title'  => 'Code',\n            'weight' => 50,\n            'params' => ['url' => '/tag/code'],\n        ],\n        [\n            'title'  => 'Zend Framework',\n            'weight' => 1,\n            'params' => ['url' => '/tag/zend-framework'],\n        ],\n        [\n            'title' => 'PHP',\n            'weight' => 5,\n            'params' => ['url' => '/tag/php'],\n        ],\n    ],\n]);\n\n// Render the cloud\necho $cloud;  This will output the tag cloud with the three tags, spread with the default\nfont-sizes:  <ul class=\"zend-tag-cloud\">\n    <li>\n        <a href=\"/tag/code\" style=\"font-size: 20px;\">\n            Code\n        </a>\n    </li>\n    <li>\n        <a href=\"/tag/zend-framework\" style=\"font-size: 10px;\">\n            Zend Framework\n        </a>\n    </li>\n    <li>\n        <a href=\"/tag/php\" style=\"font-size: 11px;\">\n            PHP\n        </a>\n    </li>\n</ul>",
            "title": "Using Zend\\Tag\\Cloud"
        },
        {
            "location": "/tag-cloud/#formatting",
            "text": "The HTML code examples are preformatted for a better visualization in the\ndocumentation.  You can define a output separator for the  HTML cloud\ndecorator .   The following example shows how create the  same  tag cloud from a  Zend\\Config\\Config  object.  ; An example tags.ini file\ntags.1.title = \"Code\"\ntags.1.weight = 50\ntags.1.params.url = \"/tag/code\"\ntags.2.title = \"Zend Framework\"\ntags.2.weight = 1\ntags.2.params.url = \"/tag/zend-framework\"\ntags.3.title = \"PHP\"\ntags.3.weight = 2\ntags.3.params.url = \"/tag/php\"  // Create the cloud from a Zend\\Config\\Config object\n$config = Zend\\Config\\Factory::fromFile('tags.ini');\n$cloud = new Zend\\Tag\\Cloud($config);\n\n// Render the cloud\necho $cloud;",
            "title": "Formatting"
        },
        {
            "location": "/tag-cloud/#decorators",
            "text": "Zend\\Tag\\Cloud  requires two types of decorators to be able to render a tag cloud:   A decorator for rendering an individual tag.  A decorator for rendering the surrounding cloud.   Zend\\Tag\\Cloud  ships a default decorator set for formatting a tag cloud in\nHTML. This set will, by default, create a tag cloud as a  <ul>/<li>  list,\nspread with different font-sizes according to the weight values of the tags\nassigned to them.",
            "title": "Decorators"
        },
        {
            "location": "/tag-cloud/#html-tag-decorator",
            "text": "The HTML tag decorator will by default render every tag in an anchor element, surrounded by a <li>  element. The anchor itself is fixed and cannot be changed, but the surrounding element(s)\ncan.",
            "title": "HTML Tag decorator"
        },
        {
            "location": "/tag-cloud/#url-parameter",
            "text": "As the HTML tag decorator always surounds the tag title with an anchor, you\nshould define a URL parameter for every tag used in it.   The tag decorator can either spread different font-sizes over the anchors or a\ndefined list of classnames. When setting options for one of those possibilities,\nthe corresponding one will automatically be enabled.  The following configuration options are available:     Option  Default  Description      fontSizeUnit  px  Defines the font-size unit used for all font-sizes. The possible values are: em, ex, px, in, cm, mm, pt, pc and %.    minFontSize  10  The minimum font-size distributed through the tags (must be numeric).    maxFontSize  20  The maximum font-size distributed through the tags (must be numeric).    classList  null  An array of classes distributed through the tags.    htmlTags  array('li')  An array of HTML tags surrounding the anchor. Each element can either be a string, which is used as element type, or an array containing an attribute list for the element, defined as key/value pair. In this case, the array key is used as element type.     The following example shows how to create a tag cloud with a customized HTML tag decorator.  $cloud = new Zend\\Tag\\Cloud([\n    'tagDecorator' => [\n        'decorator' => 'htmltag',\n        'options'   => [\n            'minFontSize' => '20',\n            'maxFontSize' => '50',\n            'htmlTags'    => [\n                'li' => ['class' => 'my_custom_class'],\n            ],\n        ],\n    ],\n    'tags' => [\n       [\n           'title'  => 'Code',\n           'weight' => 50,\n           'params' => ['url' => '/tag/code'],\n       ],\n       [\n           'title'  => 'Zend Framework',\n           'weight' => 1,\n           'params' => ['url' => '/tag/zend-framework'],\n       ],\n       [\n           'title'  => 'PHP',\n           'weight' => 5,\n           'params' => ['url' => '/tag/php']\n       ],\n   ],\n]);\n\n// Render the cloud\necho $cloud;  The output:  <ul class=\"zend-tag-cloud\">\n    <li class=\"my_custom_class\">\n        <a href=\"/tag/code\" style=\"font-size: 50px;\">Code</a>\n    </li>\n    <li class=\"my_custom_class\">\n        <a href=\"/tag/zend-framework\" style=\"font-size: 20px;\">Zend Framework</a>\n    </li>\n    <li class=\"my_custom_class\">\n        <a href=\"/tag/php\" style=\"font-size: 23px;\">PHP</a>\n    </li>\n</ul>",
            "title": "URL parameter"
        },
        {
            "location": "/tag-cloud/#html-cloud-decorator",
            "text": "By default, the HTML cloud decorator will surround the HTML tags with a  <ul> \nelement and add no separation. Like the tag decorator, you can define multiple\nsurrounding HTML tags and additionally define a separator. The available options\nare:     Option  Default  Description      separator  ' '  (a whitespace)  Defines the separator which is placed between all tags.    htmlTags  array('ul' => array('class' => 'zend-tag-cloud'))  An array of HTML tags surrounding all tags. Each element can either be a string, which is used as element type, or an array containing an attribute list for the element, defined as key/value pair. In this case, the array key is used as element type.     // Create the cloud and assign static tags to it\n$cloud = new Zend\\Tag\\Cloud([\n    'cloudDecorator' => [\n        'decorator' => 'htmlcloud',\n        'options'   => [\n            'separator' => \"\\n\\n\",\n            'htmlTags'  => [\n                'ul' => [\n                    'class' => 'my_custom_class',\n                    'id'    => 'tag-cloud',\n                ],\n            ],\n        ],\n    ],\n    'tags' => [\n        array(\n            'title'  => 'Code',\n            'weight' => 50,\n            'params' => ['url' => '/tag/code'],\n        ],\n        [\n            'title'  => 'Zend Framework',\n            'weight' => 1,\n            'params' => ['url' => '/tag/zend-framework'],\n        ],\n        [\n            'title' => 'PHP',\n            'weight' => 5,\n            'params' => ['url' => '/tag/php'],\n        ],\n    ],\n]);\n\n// Render the cloud\necho $cloud;  The output:  <ul class=\"my_custom_class\" id=\"tag-cloud\"><li><a href=\"/tag/code\" style=\"font-size:\n20px;\">Code</a></li>\n\n<li><a href=\"/tag/zend-framework\" style=\"font-size: 10px;\">Zend Framework</a></li>\n\n<li><a href=\"/tag/php\" style=\"font-size: 11px;\">PHP</a></li></ul>",
            "title": "HTML Cloud decorator"
        }
    ]
}